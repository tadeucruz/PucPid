/*
 * GuiPrincipal.java
 *
 * Created on Sep 20, 2009, 8:24:37 AM
 */
package pucpid.gui;

import java.awt.event.MouseWheelEvent;
import java.awt.event.MouseWheelListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Set;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.statistics.HistogramDataset;
import org.jfree.data.statistics.HistogramType;
import org.jfree.data.xy.IntervalXYDataset;
import pucpid.principal.controleImg;

/**
 *
 * @author tadeucruz
 */
public class GuiPrincipal extends javax.swing.JFrame {

    private controleImg controleImng = new controleImg();
    private File arquivo;
    private HashMap<Integer, File> controleFile = new HashMap<Integer, File>();
    private int larguraAtual, alturaAtual;

    public int getLargura() {
        return larguraAtual;
    }

    public int getAltura() {
        return alturaAtual;
    }

    public void setLargura(int x) {
        larguraAtual = x;
    }

    public void setAltura(int x) {
        alturaAtual = x;
    }

    /** Creates new form GuiPrincipal */
    public GuiPrincipal() {
        initComponents();
        this.setExtendedState(this.MAXIMIZED_BOTH);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem8 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jSair = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jMenuItem18 = new javax.swing.JMenuItem();
        jMenuItem19 = new javax.swing.JMenuItem();
        jMenuItem20 = new javax.swing.JMenuItem();
        jMenuItem21 = new javax.swing.JMenuItem();
        jMenuItem24 = new javax.swing.JMenuItem();
        jMenu8 = new javax.swing.JMenu();
        jMenuItem27 = new javax.swing.JMenuItem();
        jMenuItem25 = new javax.swing.JMenuItem();
        jMenuItem26 = new javax.swing.JMenuItem();
        jMenu4 = new javax.swing.JMenu();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenuItem10 = new javax.swing.JMenuItem();
        jMenuItem11 = new javax.swing.JMenuItem();
        jMenuItem12 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();
        jMenu7 = new javax.swing.JMenu();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem23 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jMenuItem17 = new javax.swing.JMenuItem();
        jMenuItem22 = new javax.swing.JMenuItem();
        jMenuItem16 = new javax.swing.JMenuItem();

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu5.setText("Edit");
        jMenuBar2.add(jMenu5);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("PuDPid - Editor de Imagem Tosko");

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jScrollPane1.setViewportView(jLabel1);
        jLabel1.getAccessibleContext().setAccessibleName("controleDeImagem");

        jTabbedPane1.addTab("arquivo>Abrir Imagem", jScrollPane1);

        jMenu1.setText("Arquivo");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Abrir Imagem");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem8.setText("Salvar Imagem");
        jMenuItem8.setEnabled(false);
        jMenuItem8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem8);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setText("Fechar Tab");
        jMenuItem4.setEnabled(false);
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);
        jMenu1.add(jSeparator1);

        jSair.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_MASK));
        jSair.setText("Sair");
        jSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSairActionPerformed(evt);
            }
        });
        jMenu1.add(jSair);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Filtros");
        jMenu2.setEnabled(false);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_1, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem2.setText("Filtro Max");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_2, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem3.setText("Filtro Min");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_3, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem5.setText("Filtro Mediana");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem5);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_4, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem6.setText("Filtro Moda");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem6);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_5, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem7.setText("Filtro Media");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem7);

        jMenuItem18.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_6, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem18.setText("Fourier");
        jMenuItem18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem18ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem18);

        jMenuItem19.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_7, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem19.setText("FFT - Rapida");
        jMenuItem19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem19ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem19);

        jMenuItem20.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_8, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem20.setText("Binarizacao");
        jMenuItem20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem20ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem20);

        jMenuItem21.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_9, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem21.setText("Equalizacao");
        jMenuItem21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem21ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem21);

        jMenuItem24.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem24.setText("** Obamizer **");
        jMenuItem24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem24ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem24);

        jMenu8.setText("Bordas");

        jMenuItem27.setText("Prewitt");
        jMenuItem27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem27ActionPerformed(evt);
            }
        });
        jMenu8.add(jMenuItem27);

        jMenuItem25.setText("Sobel H");
        jMenuItem25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem25ActionPerformed(evt);
            }
        });
        jMenu8.add(jMenuItem25);

        jMenuItem26.setText("Sobel V");
        jMenuItem26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem26ActionPerformed(evt);
            }
        });
        jMenu8.add(jMenuItem26);

        jMenu2.add(jMenu8);

        jMenuBar1.add(jMenu2);

        jMenu4.setText("Operações Basicas");
        jMenu4.setEnabled(false);

        jMenuItem9.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ADD, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem9.setText("Soma de Imagem");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem9);

        jMenuItem10.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_SUBTRACT, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem10.setText("Subtrair Imagem");
        jMenuItem10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem10ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem10);

        jMenuItem11.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_MULTIPLY, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem11.setText("Multiplicar Imagem");
        jMenuItem11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem11ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem11);

        jMenuItem12.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DIVIDE, java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem12.setText("Dividir Imagem");
        jMenuItem12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem12ActionPerformed(evt);
            }
        });
        jMenu4.add(jMenuItem12);

        jMenuBar1.add(jMenu4);

        jMenu6.setText("Adicionais");
        jMenu6.setEnabled(false);

        jMenu7.setText("Histograma");

        jMenuItem13.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem13.setText("Todas as Cores");
        jMenuItem13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem13ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem13);

        jMenuItem23.setText("RGB");
        jMenuItem23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem23ActionPerformed(evt);
            }
        });
        jMenu7.add(jMenuItem23);

        jMenu6.add(jMenu7);

        jMenuItem14.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem14.setText("LUT");
        jMenu6.add(jMenuItem14);

        jMenuItem17.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem17.setText("Limpar Diretorio");
        jMenuItem17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem17ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem17);

        jMenuItem22.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_MASK | java.awt.event.InputEvent.SHIFT_MASK));
        jMenuItem22.setText("Canais RGB");
        jMenuItem22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem22ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem22);

        jMenuItem16.setText("Zoom");
        jMenuItem16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem16ActionPerformed(evt);
            }
        });
        jMenu6.add(jMenuItem16);

        jMenuBar1.add(jMenu6);

        setJMenuBar(jMenuBar1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 970, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE))
        );

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-986)/2, (screenSize.height-489)/2, 986, 489);
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        jMenu2.setEnabled(true);
        jMenu4.setEnabled(true);
        jMenu6.setEnabled(true);
        jMenuItem8.setEnabled(true);
        jMenuItem4.setEnabled(true);

        System.out.println("Abrindo Arquivo");
        JFileChooser open = new JFileChooser("./");
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Image Files", "jpg", "jpeg", "png");
        open.setFileFilter(filter);
        int controle = open.showOpenDialog(this);
        if (controle == JFileChooser.APPROVE_OPTION) {
            try {
                arquivo = open.getSelectedFile();
                ImageIcon icon = new ImageIcon(arquivo.getAbsolutePath());
                jLabel1.setIcon(icon);
                controleImng.abrir(arquivo.getAbsolutePath());
                controleFile.put(0, arquivo);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex);
                Logger.getLogger(GuiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.setExtendedState(this.MAXIMIZED_BOTH);
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        System.out.println("Aplicando Filtro Max");
        try {
            controleImng.abrir(controleFile.get(jTabbedPane1.getSelectedIndex()).getPath());
            String resposta = JOptionPane.showInputDialog(this, "Informe o tamanho da mascara");
            File volta = controleImng.aplicarFiltroMax(controleFile.get(jTabbedPane1.getSelectedIndex()).getName(), Integer.valueOf(resposta));
            ImageIcon icon = new ImageIcon(volta.getAbsolutePath());
            javax.swing.JLabel imgNova = new JLabel(icon);
            javax.swing.JScrollPane js = new JScrollPane();
            js.setViewportView(imgNova);
            //jTabbedPane1.setTitleAt(0, arquivo.getName());
            jTabbedPane1.addTab(arquivo.getName() + " - Filtro Max", js);
            controleFile.put(jTabbedPane1.getTabCount() - 1, volta);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(GuiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        System.out.println("Aplicando Filtro Min");
        try {
            controleImng.abrir(controleFile.get(jTabbedPane1.getSelectedIndex()).getPath());
            String resposta = JOptionPane.showInputDialog(this, "Informe o tamanho da mascara");
            File volta = controleImng.aplicarFiltroMin(arquivo.getName(), Integer.valueOf(resposta));
            ImageIcon icon = new ImageIcon(volta.getAbsolutePath());
            javax.swing.JLabel imgNova = new JLabel(icon);
            javax.swing.JScrollPane js = new JScrollPane();
            js.setViewportView(imgNova);
            //jTabbedPane1.setTitleAt(0, arquivo.getName());
            jTabbedPane1.addTab(arquivo.getName() + " - Filtro Min", js);
            controleFile.put(jTabbedPane1.getTabCount() - 1, volta);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(GuiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        if (jTabbedPane1.getSelectedIndex() != 0) {
            int pos = jTabbedPane1.getSelectedIndex();
            File fi = controleFile.get(pos);
            try {
                if (fi.delete()) {
                    controleFile.remove(pos).delete();
                    jTabbedPane1.removeTabAt(pos);
                    for (int i = pos + 1; i <= controleFile.size(); i++) {
                        File f = controleFile.get(i);
                        controleFile.put(i - 1, f);
                    }
                    controleImng.reset();
                }
            } catch (Exception ex) {
                jTabbedPane1.removeTabAt(pos);
            }
        }
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        System.out.println("Aplicando Filtro Mediana");
        try {
            controleImng.abrir(controleFile.get(jTabbedPane1.getSelectedIndex()).getPath());
            String resposta = JOptionPane.showInputDialog(this, "Informe o tamanho da mascara");
            File volta = controleImng.aplicarFiltroMediana(arquivo.getName(), Integer.valueOf(resposta));
            ImageIcon icon = new ImageIcon(volta.getAbsolutePath());
            javax.swing.JLabel imgNova = new JLabel(icon);
            javax.swing.JScrollPane js = new JScrollPane();
            js.setViewportView(imgNova);
            //jTabbedPane1.setTitleAt(0, arquivo.getName());
            jTabbedPane1.addTab(arquivo.getName() + " - Filtro Mediana", js);
            controleFile.put(jTabbedPane1.getTabCount() - 1, volta);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(GuiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        System.out.println("Aplicando Filtro Moda");
        try {
            controleImng.abrir(controleFile.get(jTabbedPane1.getSelectedIndex()).getPath());
            String resposta = JOptionPane.showInputDialog(this, "Informe o tamanho da mascara");
            File volta = controleImng.aplicarFiltroModa(arquivo.getName(), Integer.valueOf(resposta));
            ImageIcon icon = new ImageIcon(volta.getAbsolutePath());
            javax.swing.JLabel imgNova = new JLabel(icon);
            javax.swing.JScrollPane js = new JScrollPane();
            js.setViewportView(imgNova);
            //jTabbedPane1.setTitleAt(0, arquivo.getName());
            jTabbedPane1.addTab(arquivo.getName() + " - Filtro Moda", js);
            controleFile.put(jTabbedPane1.getTabCount() - 1, volta);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(GuiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem7ActionPerformed
        System.out.println("Aplicando Filtro Média");
        try {
            controleImng.abrir(controleFile.get(jTabbedPane1.getSelectedIndex()).getPath());
            String resposta = JOptionPane.showInputDialog(this, "Informe o tamanho da mascara");
            File volta = controleImng.aplicarFiltroMedia(arquivo.getName(), Integer.valueOf(resposta));
            ImageIcon icon = new ImageIcon(volta.getAbsolutePath());
            javax.swing.JLabel imgNova = new JLabel(icon);
            javax.swing.JScrollPane js = new JScrollPane();
            js.setViewportView(imgNova);
            //jTabbedPane1.setTitleAt(0, arquivo.getName());
            jTabbedPane1.addTab(arquivo.getName() + " - Filtro Media", js);
            controleFile.put(jTabbedPane1.getTabCount() - 1, volta);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(GuiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        ;
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem9ActionPerformed
        System.out.println("Somando Imagens");
        JFileChooser open = new JFileChooser("./");
        int controle = open.showOpenDialog(this);
        if (controle == JFileChooser.APPROVE_OPTION) {
            try {
                arquivo = open.getSelectedFile();
                controleImng.abrir(controleFile.get(jTabbedPane1.getSelectedIndex()).getPath());
                File volta = controleImng.aplicarSoma(arquivo.getName(), arquivo.getAbsolutePath());
                ImageIcon icon = new ImageIcon(volta.getAbsolutePath());
                javax.swing.JLabel imgNova = new JLabel(icon);
                javax.swing.JScrollPane js = new JScrollPane();
                js.setViewportView(imgNova);
                //jTabbedPane1.setTitleAt(0, arquivo.getName());
                jTabbedPane1.addTab(arquivo.getName() + " - Somada", js);
                controleFile.put(jTabbedPane1.getTabCount() - 1, volta);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                Logger.getLogger(GuiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jMenuItem10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem10ActionPerformed
        System.out.println("Subtrair Imagens");
        JFileChooser open = new JFileChooser("./");
        int controle = open.showOpenDialog(this);
        if (controle == JFileChooser.APPROVE_OPTION) {
            try {
                arquivo = open.getSelectedFile();
                controleImng.abrir(controleFile.get(jTabbedPane1.getSelectedIndex()).getPath());
                File volta = controleImng.aplicarSub(arquivo.getName(), arquivo.getAbsolutePath());
                ImageIcon icon = new ImageIcon(volta.getAbsolutePath());
                javax.swing.JLabel imgNova = new JLabel(icon);
                javax.swing.JScrollPane js = new JScrollPane();
                js.setViewportView(imgNova);
                //jTabbedPane1.setTitleAt(0, arquivo.getName());
                jTabbedPane1.addTab(arquivo.getName() + " - Sobtraido", js);
                controleFile.put(jTabbedPane1.getTabCount() - 1, volta);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                Logger.getLogger(GuiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem10ActionPerformed

    private void jMenuItem11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem11ActionPerformed
        System.out.println("Multiplicar Imagens");
        JFileChooser open = new JFileChooser("./");
        int controle = open.showOpenDialog(this);
        if (controle == JFileChooser.APPROVE_OPTION) {
            try {
                arquivo = open.getSelectedFile();
                controleImng.abrir(controleFile.get(jTabbedPane1.getSelectedIndex()).getPath());
                File volta = controleImng.aplicarMult(arquivo.getName(), arquivo.getAbsolutePath());
                ImageIcon icon = new ImageIcon(volta.getAbsolutePath());
                javax.swing.JLabel imgNova = new JLabel(icon);
                javax.swing.JScrollPane js = new JScrollPane();
                js.setViewportView(imgNova);
                //jTabbedPane1.setTitleAt(0, arquivo.getName());
                jTabbedPane1.addTab(arquivo.getName() + " - Multiplicado", js);
                controleFile.put(jTabbedPane1.getTabCount() - 1, volta);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                Logger.getLogger(GuiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem11ActionPerformed

    private void jMenuItem12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem12ActionPerformed
        System.out.println("Dividir Imagens");
        JFileChooser open = new JFileChooser("./");
        int controle = open.showOpenDialog(this);
        if (controle == JFileChooser.APPROVE_OPTION) {
            try {
                arquivo = open.getSelectedFile();
                controleImng.abrir(controleFile.get(jTabbedPane1.getSelectedIndex()).getPath());
                File volta = controleImng.aplicarDiv(arquivo.getName(), arquivo.getAbsolutePath());
                ImageIcon icon = new ImageIcon(volta.getAbsolutePath());
                javax.swing.JLabel imgNova = new JLabel(icon);
                javax.swing.JScrollPane js = new JScrollPane();
                js.setViewportView(imgNova);
                //jTabbedPane1.setTitleAt(0, arquivo.getName());
                jTabbedPane1.addTab(arquivo.getName() + " - Dividido", js);
                controleFile.put(jTabbedPane1.getTabCount() - 1, volta);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
                Logger.getLogger(GuiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jMenuItem12ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem8ActionPerformed

        System.out.println("Salvando Arquivo");
        JFileChooser save = new JFileChooser("./");
        save.setDialogType(JFileChooser.SAVE_DIALOG);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Image Files", "jpg", "jpeg", "png");
        save.setFileFilter(filter);
        int controle = save.showSaveDialog(this);
        if (controle == JFileChooser.APPROVE_OPTION) {
            try {
                arquivo = save.getSelectedFile();
                //ImageIcon icon = new ImageIcon(arquivo.getAbsolutePath());
                //jLabel1.setIcon(icon);
                controleImng.salvar(arquivo.getAbsolutePath());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, ex);
                Logger.getLogger(GuiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.setExtendedState(this.MAXIMIZED_BOTH);
        }

    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem13ActionPerformed

        System.out.println("Gerando Histograma Homogêneo");
        IntervalXYDataset intervalxydataset = createDataset();
        JFreeChart jfreechart = createChart(intervalxydataset);
        ChartPanel chartpanel = new ChartPanel(jfreechart);
        //chartpanel.setPreferredSize(new Dimension(800, 600));
        //setContentPane(chartpanel);
        jTabbedPane1.addTab("Histograma - Níveis de Cinza", chartpanel);
    }//GEN-LAST:event_jMenuItem13ActionPerformed

    private void jMenuItem16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem16ActionPerformed
        // ZOOM
        //JOptionPane.showMessageDialog(this, "Função não implementada!");

        /*ImageIcon i = (ImageIcon)jLabel1.getIcon();
        jScrollPane1.remove(jLabel1);
        jScrollPane1.add(
        (
        (
        new JScrollPane(jScrollPane1.VERTICAL_SCROLLBAR_AS_NEEDED,
        jScrollPane1.HORIZONTAL_SCROLLBAR_ALWAYS)
        ).add(
        new javax.swing.JLabel(i)
        )
        )
        );*/

        //final int larguraInicial = controleImng.getWidth();
        //final int alturaInicial = controleImng.getHeight();

        setAltura(controleImng.getHeight());
        setLargura(controleImng.getWidth());

        jLabel1.addMouseWheelListener(new MouseWheelListener() {

            @Override
            public void mouseWheelMoved(MouseWheelEvent e) {
                // TODO Auto-generated method stub
           /*if(e.getWheelRotation()<0)
                {
                //showImageZoomIn(url, image);

                ImageIcon icon = new ImageIcon(controleImng.resizePercentual(
                (int)Math.floor((1+(0.2*e.getWheelRotation()))*controleImng.getWidth()+0.5),
                (int)Math.floor(((1+(0.2*e.getWheelRotation())))*controleImng.getHeight()+0.5))
                );
                jLabel1.setIcon(icon);
                }

                if(e.getWheelRotation()>0)
                {
                //showImageZoomOut(url, imagePequena, image);

                ImageIcon icon = new ImageIcon(controleImng.resizePercentual(
                (int)Math.floor((1+(0.2*e.getWheelRotation()))*controleImng.getWidth()+0.5),
                (int)Math.floor(((1+(0.2*e.getWheelRotation())))*controleImng.getHeight()+0.5))
                );
                jLabel1.setIcon(icon);
                }*/



                double d = 1.0;
                int mouse = e.getWheelRotation();
                if (mouse > 0) //d = (  1+( 0.2*1.0 )  );
                {
                    d = 1.2;
                } else if (mouse < 0) //d = 1/(  1+( 0.2*1.0 )  );
                {
                    d = 0.8;
                }

                int larguraAtual = (int) Math.floor(
                        (d * getLargura()) + 0.5);
                int alturaAtual = (int) Math.floor(
                        (d * getAltura()) + 0.5);

                if ((mouse < 0 && larguraAtual > 2 && alturaAtual > 2) || (mouse > 0)) {  // Setar Limite Visível & Java Heap
                    setLargura(larguraAtual);
                    setAltura(alturaAtual);
                    ImageIcon icon = new ImageIcon(controleImng.resizePercentual(
                            larguraAtual,
                            alturaAtual));
                    jLabel1.setIcon(icon);
                }


            }
        });


        //int largura = Integer.parseInt(JOptionPane.showInputDialog("Zoom\nLargura"));
        //int altura = Integer.parseInt(JOptionPane.showInputDialog("Zoom\nAltura"));

        //ImageIcon icon = new ImageIcon(controleImng.resize(largura, altura));
        //jLabel1.setIcon(icon);


    }//GEN-LAST:event_jMenuItem16ActionPerformed

    private void jMenuItem17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem17ActionPerformed
        JOptionPane.showMessageDialog(this, "Está funcionando, mas cuidado na hora de direcionar\npois se apagar, JA ERA");
        GuiPrincipal GP = new GuiPrincipal();
        File diretorio = new File("c:\\temp");
        try {
            if (diretorio.exists()) {
                GP.remover(diretorio);
                JOptionPane.showMessageDialog(this, "Diretorio Apagado com Sucesso!!!");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e);
            Logger.getLogger(GuiPrincipal.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_jMenuItem17ActionPerformed

    private void jMenuItem18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem18ActionPerformed
        System.out.println("Aplicando Fourier");
        try {
            controleImng.abrir(controleFile.get(jTabbedPane1.getSelectedIndex()).getPath());
            File volta = controleImng.aplicarDFT(arquivo.getName());
            ImageIcon icon = new ImageIcon(volta.getAbsolutePath());
            javax.swing.JLabel imgNova = new JLabel(icon);
            javax.swing.JScrollPane js = new JScrollPane();
            js.setViewportView(imgNova);
            //jTabbedPane1.setTitleAt(0, arquivo.getName());
            jTabbedPane1.addTab(arquivo.getName() + " - Filtro DFT", js);
            controleFile.put(jTabbedPane1.getTabCount() - 1, volta);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(GuiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem18ActionPerformed

    private void jMenuItem22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem22ActionPerformed
        System.out.println("Aplicando Canais RGB");
        try {
            controleImng.abrir(controleFile.get(jTabbedPane1.getSelectedIndex()).getPath());
            ArrayList<File> voltaMetodo = controleImng.canaisRGB(arquivo.getName());
            for (File volta : voltaMetodo) {
                ImageIcon icon = new ImageIcon(volta.getAbsolutePath());
                javax.swing.JLabel imgNova = new JLabel(icon);
                javax.swing.JScrollPane js = new JScrollPane();
                js.setViewportView(imgNova);
                //jTabbedPane1.setTitleAt(0, arquivo.getName());
                jTabbedPane1.addTab(arquivo.getName() + " - Canais RGB", js);
                controleFile.put(jTabbedPane1.getTabCount() - 1, volta);
            }
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(GuiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem22ActionPerformed

    private void jMenuItem20ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem20ActionPerformed
        System.out.println("Aplicando Binarização");
        String resposta = JOptionPane.showInputDialog(this, "Informe o Limiar");
        try {
            controleImng.abrir(controleFile.get(jTabbedPane1.getSelectedIndex()).getPath());
            File volta = controleImng.aplicarLimiar(arquivo.getName(), Integer.valueOf(resposta));
            ImageIcon icon = new ImageIcon(volta.getAbsolutePath());
            javax.swing.JLabel imgNova = new JLabel(icon);
            javax.swing.JScrollPane js = new JScrollPane();
            js.setViewportView(imgNova);
            //jTabbedPane1.setTitleAt(0, arquivo.getName());
            jTabbedPane1.addTab(arquivo.getName() + " - Filtro Binarização", js);
            controleFile.put(jTabbedPane1.getTabCount() - 1, volta);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(GuiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem20ActionPerformed

    private void jMenuItem23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem23ActionPerformed
        System.out.println("Gerando Histograma Heterogêneo");
        IntervalXYDataset intervalxydataset = createDatasetRGB();
        JFreeChart jfreechart = createChart(intervalxydataset);
        ChartPanel chartpanel = new ChartPanel(jfreechart);
        //chartpanel.setPreferredSize(new Dimension(800, 600));
        //setContentPane(chartpanel);
        jTabbedPane1.addTab("Histograma - RGB", chartpanel);
    }//GEN-LAST:event_jMenuItem23ActionPerformed

    private void jMenuItem19ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem19ActionPerformed
        // Fourier Rapido
        //JOptionPane.showMessageDialog(this, "Função não implementada!");

        try {
            controleImng.abrir(controleFile.get(jTabbedPane1.getSelectedIndex()).getPath());
            double v_local[] = controleImng.valoresHistograma();
            int vetor[] = new int[256];
            for (int t=0; t<=255; t++) vetor[t] = 0;
            for (int t=0; t<v_local.length; t++){
                vetor[(int) Math.floor(v_local[t]+0.5)] += t;
                //System.out.println((int) Math.floor(v_local[t]+0.5));
            }

            // Cada posição do vetor[] armazena a frequência do NC correspondente [0...255]

            //for (int t=0; t<=255; t++) System.out.println("["+t+"] = "+vetor[t]);

            System.out.println("FFT Terminada");
        } catch (IOException ex) {
            Logger.getLogger(GuiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jMenuItem19ActionPerformed

    private void jMenuItem21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem21ActionPerformed
        System.out.println("Gerando Histograma Homogêneo");
        IntervalXYDataset intervalxydataset = createDatasetEqualizacao();
        JFreeChart jfreechart = createChart(intervalxydataset);
        ChartPanel chartpanel = new ChartPanel(jfreechart);
        //chartpanel.setPreferredSize(new Dimension(800, 600));
        //setContentPane(chartpanel);
        jTabbedPane1.addTab("Histograma - Níveis Equialização", chartpanel);

        /*System.out.println("Aplicando Equialização");
        try {
        controleImng.abrir(controleFile.get(jTabbedPane1.getSelectedIndex()).getPath());
        File volta = controleImng.aplicarEqualizacao(arquivo.getName());
        ImageIcon icon = new ImageIcon(volta.getAbsolutePath());
        javax.swing.JLabel imgNova = new JLabel(icon);
        javax.swing.JScrollPane js = new JScrollPane();
        js.setViewportView(imgNova);
        //jTabbedPane1.setTitleAt(0, arquivo.getName());
        jTabbedPane1.addTab(arquivo.getName() + " - Obama", js);
        controleFile.put(jTabbedPane1.getTabCount() - 1, volta);
        } catch (IOException ex) {
        JOptionPane.showMessageDialog(this, ex.getMessage());
        Logger.getLogger(GuiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }*/
    }//GEN-LAST:event_jMenuItem21ActionPerformed

    private void jMenuItem24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem24ActionPerformed
        // TODO add your handling code here:
        System.out.println("Aplicando Obamizador");
        try {
            controleImng.abrir(controleFile.get(jTabbedPane1.getSelectedIndex()).getPath());
            File volta = controleImng.aplicarObamizador(arquivo.getName());
            ImageIcon icon = new ImageIcon(volta.getAbsolutePath());
            javax.swing.JLabel imgNova = new JLabel(icon);
            javax.swing.JScrollPane js = new JScrollPane();
            js.setViewportView(imgNova);
            //jTabbedPane1.setTitleAt(0, arquivo.getName());
            jTabbedPane1.addTab(arquivo.getName() + " - Obama", js);
            controleFile.put(jTabbedPane1.getTabCount() - 1, volta);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(GuiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem24ActionPerformed

    private void jMenuItem25ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem25ActionPerformed
        System.out.println("Aplicando Sobel H");
        try {
            controleImng.abrir(controleFile.get(jTabbedPane1.getSelectedIndex()).getPath());
            File volta = controleImng.aplicarSobelH(arquivo.getName());
            ImageIcon icon = new ImageIcon(volta.getAbsolutePath());
            javax.swing.JLabel imgNova = new JLabel(icon);
            javax.swing.JScrollPane js = new JScrollPane();
            js.setViewportView(imgNova);
            //jTabbedPane1.setTitleAt(0, arquivo.getName());
            jTabbedPane1.addTab(arquivo.getName() + " - Sobel H", js);
            controleFile.put(jTabbedPane1.getTabCount() - 1, volta);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(GuiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem25ActionPerformed

    private void jMenuItem26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem26ActionPerformed
        System.out.println("Aplicando Sobel V");
        try {
            controleImng.abrir(controleFile.get(jTabbedPane1.getSelectedIndex()).getPath());
            File volta = controleImng.aplicarSobelV(arquivo.getName());
            ImageIcon icon = new ImageIcon(volta.getAbsolutePath());
            javax.swing.JLabel imgNova = new JLabel(icon);
            javax.swing.JScrollPane js = new JScrollPane();
            js.setViewportView(imgNova);
            //jTabbedPane1.setTitleAt(0, arquivo.getName());
            jTabbedPane1.addTab(arquivo.getName() + " - Sobel V", js);
            controleFile.put(jTabbedPane1.getTabCount() - 1, volta);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(GuiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem26ActionPerformed

    private void jMenuItem27ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem27ActionPerformed
        // Prewitt
        System.out.println("Aplicando Prewitt");
        try {
            controleImng.abrir(controleFile.get(jTabbedPane1.getSelectedIndex()).getPath());
            File volta = controleImng.aplicarPrewitt(arquivo.getName());
            ImageIcon icon = new ImageIcon(volta.getAbsolutePath());
            javax.swing.JLabel imgNova = new JLabel(icon);
            javax.swing.JScrollPane js = new JScrollPane();
            js.setViewportView(imgNova);
            //jTabbedPane1.setTitleAt(0, arquivo.getName());
            jTabbedPane1.addTab(arquivo.getName() + " - Prewitt", js);
            controleFile.put(jTabbedPane1.getTabCount() - 1, volta);
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
            Logger.getLogger(GuiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jMenuItem27ActionPerformed

    private void jSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSairActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_jSairActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                
                try {
                    UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    new GuiPrincipal().setVisible(true);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(GuiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(GuiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(GuiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(GuiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem10;
    private javax.swing.JMenuItem jMenuItem11;
    private javax.swing.JMenuItem jMenuItem12;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem16;
    private javax.swing.JMenuItem jMenuItem17;
    private javax.swing.JMenuItem jMenuItem18;
    private javax.swing.JMenuItem jMenuItem19;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem20;
    private javax.swing.JMenuItem jMenuItem21;
    private javax.swing.JMenuItem jMenuItem22;
    private javax.swing.JMenuItem jMenuItem23;
    private javax.swing.JMenuItem jMenuItem24;
    private javax.swing.JMenuItem jMenuItem25;
    private javax.swing.JMenuItem jMenuItem26;
    private javax.swing.JMenuItem jMenuItem27;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JMenuItem jSair;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    // End of variables declaration//GEN-END:variables

    private IntervalXYDataset createDataset() {
        try {
            controleImng.abrir(controleFile.get(jTabbedPane1.getSelectedIndex()).getPath());
            double v_local[] = controleImng.valoresHistograma();
            HistogramDataset histogramdataset = new HistogramDataset();
            histogramdataset.addSeries("Níveis de Cinza", v_local, v_local.length);
            return histogramdataset;
        } catch (IOException ex) {
            Logger.getLogger(GuiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    private IntervalXYDataset createDatasetRGB() {
        try {
            controleImng.abrir(controleFile.get(jTabbedPane1.getSelectedIndex()).getPath());
            ArrayList<double[]> v_local = controleImng.valoresHistogramaRGB();
            HistogramDataset histogramdataset = new HistogramDataset();
            histogramdataset.addSeries("Vermelho", v_local.get(0), v_local.get(0).length);
            histogramdataset.addSeries("Azul", v_local.get(1), v_local.get(1).length);
            histogramdataset.addSeries("Verde", v_local.get(2), v_local.get(2).length);
            return histogramdataset;
        } catch (IOException ex) {
            Logger.getLogger(GuiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    private IntervalXYDataset createDatasetEqualizacao() {
        try {
            controleImng.abrir(controleFile.get(jTabbedPane1.getSelectedIndex()).getPath());
            double v_local[] = controleImng.aplicarEqualizacao();
            HistogramDataset histogramdataset = new HistogramDataset();
            histogramdataset.addSeries("Equalizacao", v_local, v_local.length);
            return histogramdataset;
        } catch (IOException ex) {
            Logger.getLogger(GuiPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }

    private JFreeChart createChart(IntervalXYDataset intervalxydataset) {
        JFreeChart jfreechart = ChartFactory.createHistogram("Histograma de Frequência", null, null, intervalxydataset, PlotOrientation.VERTICAL, true, true, true);
        jfreechart.getXYPlot().setForegroundAlpha(0.75F);
        return jfreechart;
    }

    private int fechar() {
        System.out.println("FINALIZANDO");
        Set<Integer> chaves = controleFile.keySet();
        for (Integer chave : chaves) {
            controleFile.get(chave).delete();
        }
        return 1;
    }

    public void remover(File f) {
        if (f.isDirectory()) {
            File[] files = f.listFiles();
            for (int i = 0; i < files.length; ++i) {
                remover(files[i]);
            }
        }
        f.delete();
    }

    @Override
    public void dispose() {
        super.dispose();
        System.out.println("FINALIZANDO");
        Set<Integer> chaves = controleFile.keySet();
        controleFile.remove(0);
        if (controleFile.size() >= 1) {
            for (Integer chave : chaves) {
                controleFile.get(chave).delete();
            }
        }
    }
}
